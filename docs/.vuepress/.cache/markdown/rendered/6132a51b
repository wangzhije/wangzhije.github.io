{"content":"<h2 id=\"domcontentloaded-和-load-事件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#domcontentloaded-和-load-事件\"><span>DOMContentLoaded 和 load 事件</span></a></h2>\n<blockquote>\n<p>MDN 定义<br>\nDOMContentLoaded</p>\n<ul>\n<li>当初始的 HTML 文档 被 完全加载 和 解析完成 之后，DOMContentLoaded 事件被触发。</li>\n<li>而无需等待 CSS、图像和子框架的完成加载</li>\n</ul>\n<p>load</p>\n<ul>\n<li>当所有资源加载完成之后触发</li>\n<li>包括所有相关资源: 样式表 CSS、图像 img、脚本 js</li>\n</ul>\n</blockquote>\n<h2 id=\"首次渲染和白屏\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#首次渲染和白屏\"><span>首次渲染和白屏</span></a></h2>\n<p>在 body 中第一个 script 资源下载完成之前，浏览器会进行<strong>首次渲染</strong>。</p>\n<p>将该 script 标签前面的 DOM 树和 CSSOM 合并成一棵 Render 树，渲染到页面中。</p>\n<p>这是页面从<strong>白屏</strong>到首次渲染的时间节点，即 DOMContentLoaded 触发之前经历的 HTML 文档加载和解析的时间。</p>\n<h2 id=\"遇到-script-标签\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#遇到-script-标签\"><span>遇到 <code v-pre>&lt;script&gt;</code> 标签</span></a></h2>\n<ul>\n<li>当遇到（同步）脚本（标签中不含 <code v-pre>async</code> 或 <code v-pre>defer</code>）则停止 HTML 解析，先去加载脚本，然后执行，执行结束后继续解析 HTML 文档</li>\n<li>当遇到 <code v-pre>defer</code> 脚本，则在后台加载脚本。文档解析过程不中断，而等文档解析结束之后，defer 脚本执行</li>\n<li>当遇到 <code v-pre>async</code> 脚本，则在后台加载脚本。文档解析过程不中断，脚本加载完成后，文档停止解析，脚本执行，执行结束后文档继续解析</li>\n</ul>\n<h2 id=\"script-和-domcontentloaded\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#script-和-domcontentloaded\"><span><code v-pre>&lt;script&gt;</code> 和 DOMContentLoaded</span></a></h2>\n<h3 id=\"同步脚本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#同步脚本\"><span>同步脚本</span></a></h3>\n<p>标签中不含 <code v-pre>async</code> 或 <code v-pre>defer</code></p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code class=\"language-html\"><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  &#x3C;</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> src</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">***.js</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> charset</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">utf-8</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>&#x3C;/</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ul>\n<li>HTML 文档被解析时如果遇见（同步）脚本，则停止解析。</li>\n<li>先去加载脚本，然后执行，执行结束后继续解析 HTML 文档。</li>\n<li>HTML 文档解析完毕后触发 DOMContentLoaded。</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-sync.png\" alt=\"script-sync\"></p>\n<h3 id=\"defer-脚本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#defer-脚本\"><span><code v-pre>defer</code> 脚本</span></a></h3>\n<p>当 HTML 文档被解析时如果遇见 <code v-pre>defer</code> 脚本</p>\n<ul>\n<li>则在后台加载脚本，文档解析过程不中断</li>\n<li>等文档解析结束之后，defer 脚本执行。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code class=\"language-html\"><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  &#x3C;</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> src</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">***.js</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> charset</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">utf-8</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> defer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>&#x3C;/</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ol>\n<li>HTML 还没解析完成时，defer 脚本已经加载完毕</li>\n</ol>\n<ul>\n<li>defer 脚本将等待 HTML 解析完成后再执行</li>\n<li>defer 脚本执行完毕后触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-defer1.png\" alt=\"script-defer1\"></p>\n<ol start=\"2\">\n<li>HTML 解析完成时，defer 脚本还没加载完毕</li>\n</ol>\n<ul>\n<li>defer 脚本继续加载，加载完成后直接执行</li>\n<li>defer 脚本执行完毕后触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-defer2.png\" alt=\"script-defer2\"></p>\n<h3 id=\"async-脚本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#async-脚本\"><span><code v-pre>async</code> 脚本</span></a></h3>\n<p>当 HTML 文档被解析时如果遇见 <code v-pre>async</code> 脚本</p>\n<ul>\n<li>则在后台加载脚本，文档解析过程不中断。</li>\n<li>脚本加载完成后，文档停止解析，脚本执行，执行结束后文档继续解析。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code class=\"language-html\"><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  &#x3C;</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> src</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">***.js</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> charset</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">utf-8</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> async</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>&#x3C;/</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ol>\n<li>HTML 还没有被解析完的时候，async 脚本已经加载完成</li>\n</ol>\n<ul>\n<li>HTML 停止解析，去执行脚本</li>\n<li>脚本执行完毕后触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-async1.png\" alt=\"script-async1\"></p>\n<ol start=\"2\">\n<li>HTML 解析完了之后，async 脚本才加载完成</li>\n</ol>\n<ul>\n<li>执行脚本</li>\n<li>在 HTML 解析完毕、async 脚本还没加载完的时候就触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-async2.png\" alt=\"script-async2\"></p>\n","env":{"base":"/blog/","filePath":"/Users/wangzhijie/Desktop/myspace/wangzhije.github.io/docs/notes/1.frontend/4.浏览器/2.html解析.md","filePathRelative":"notes/1.frontend/4.浏览器/2.html解析.md","frontmatter":{"title":"HTML 解析","createTime":"2023/05/25 15:28:27","permalink":"/frontend/browser/mfzfedpc/","tags":["浏览器"]},"sfcBlocks":{"template":{"type":"template","content":"<template><h2 id=\"domcontentloaded-和-load-事件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#domcontentloaded-和-load-事件\"><span>DOMContentLoaded 和 load 事件</span></a></h2>\n<blockquote>\n<p>MDN 定义<br>\nDOMContentLoaded</p>\n<ul>\n<li>当初始的 HTML 文档 被 完全加载 和 解析完成 之后，DOMContentLoaded 事件被触发。</li>\n<li>而无需等待 CSS、图像和子框架的完成加载</li>\n</ul>\n<p>load</p>\n<ul>\n<li>当所有资源加载完成之后触发</li>\n<li>包括所有相关资源: 样式表 CSS、图像 img、脚本 js</li>\n</ul>\n</blockquote>\n<h2 id=\"首次渲染和白屏\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#首次渲染和白屏\"><span>首次渲染和白屏</span></a></h2>\n<p>在 body 中第一个 script 资源下载完成之前，浏览器会进行<strong>首次渲染</strong>。</p>\n<p>将该 script 标签前面的 DOM 树和 CSSOM 合并成一棵 Render 树，渲染到页面中。</p>\n<p>这是页面从<strong>白屏</strong>到首次渲染的时间节点，即 DOMContentLoaded 触发之前经历的 HTML 文档加载和解析的时间。</p>\n<h2 id=\"遇到-script-标签\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#遇到-script-标签\"><span>遇到 <code v-pre>&lt;script&gt;</code> 标签</span></a></h2>\n<ul>\n<li>当遇到（同步）脚本（标签中不含 <code v-pre>async</code> 或 <code v-pre>defer</code>）则停止 HTML 解析，先去加载脚本，然后执行，执行结束后继续解析 HTML 文档</li>\n<li>当遇到 <code v-pre>defer</code> 脚本，则在后台加载脚本。文档解析过程不中断，而等文档解析结束之后，defer 脚本执行</li>\n<li>当遇到 <code v-pre>async</code> 脚本，则在后台加载脚本。文档解析过程不中断，脚本加载完成后，文档停止解析，脚本执行，执行结束后文档继续解析</li>\n</ul>\n<h2 id=\"script-和-domcontentloaded\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#script-和-domcontentloaded\"><span><code v-pre>&lt;script&gt;</code> 和 DOMContentLoaded</span></a></h2>\n<h3 id=\"同步脚本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#同步脚本\"><span>同步脚本</span></a></h3>\n<p>标签中不含 <code v-pre>async</code> 或 <code v-pre>defer</code></p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code class=\"language-html\"><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  &#x3C;</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> src</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">***.js</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> charset</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">utf-8</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>&#x3C;/</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ul>\n<li>HTML 文档被解析时如果遇见（同步）脚本，则停止解析。</li>\n<li>先去加载脚本，然后执行，执行结束后继续解析 HTML 文档。</li>\n<li>HTML 文档解析完毕后触发 DOMContentLoaded。</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-sync.png\" alt=\"script-sync\"></p>\n<h3 id=\"defer-脚本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#defer-脚本\"><span><code v-pre>defer</code> 脚本</span></a></h3>\n<p>当 HTML 文档被解析时如果遇见 <code v-pre>defer</code> 脚本</p>\n<ul>\n<li>则在后台加载脚本，文档解析过程不中断</li>\n<li>等文档解析结束之后，defer 脚本执行。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code class=\"language-html\"><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  &#x3C;</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> src</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">***.js</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> charset</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">utf-8</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> defer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>&#x3C;/</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ol>\n<li>HTML 还没解析完成时，defer 脚本已经加载完毕</li>\n</ol>\n<ul>\n<li>defer 脚本将等待 HTML 解析完成后再执行</li>\n<li>defer 脚本执行完毕后触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-defer1.png\" alt=\"script-defer1\"></p>\n<ol start=\"2\">\n<li>HTML 解析完成时，defer 脚本还没加载完毕</li>\n</ol>\n<ul>\n<li>defer 脚本继续加载，加载完成后直接执行</li>\n<li>defer 脚本执行完毕后触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-defer2.png\" alt=\"script-defer2\"></p>\n<h3 id=\"async-脚本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#async-脚本\"><span><code v-pre>async</code> 脚本</span></a></h3>\n<p>当 HTML 文档被解析时如果遇见 <code v-pre>async</code> 脚本</p>\n<ul>\n<li>则在后台加载脚本，文档解析过程不中断。</li>\n<li>脚本加载完成后，文档停止解析，脚本执行，执行结束后文档继续解析。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code class=\"language-html\"><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  &#x3C;</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> src</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">***.js</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> charset</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">utf-8</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> async</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>&#x3C;/</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ol>\n<li>HTML 还没有被解析完的时候，async 脚本已经加载完成</li>\n</ol>\n<ul>\n<li>HTML 停止解析，去执行脚本</li>\n<li>脚本执行完毕后触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-async1.png\" alt=\"script-async1\"></p>\n<ol start=\"2\">\n<li>HTML 解析完了之后，async 脚本才加载完成</li>\n</ol>\n<ul>\n<li>执行脚本</li>\n<li>在 HTML 解析完毕、async 脚本还没加载完的时候就触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-async2.png\" alt=\"script-async2\"></p>\n</template>","contentStripped":"<h2 id=\"domcontentloaded-和-load-事件\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#domcontentloaded-和-load-事件\"><span>DOMContentLoaded 和 load 事件</span></a></h2>\n<blockquote>\n<p>MDN 定义<br>\nDOMContentLoaded</p>\n<ul>\n<li>当初始的 HTML 文档 被 完全加载 和 解析完成 之后，DOMContentLoaded 事件被触发。</li>\n<li>而无需等待 CSS、图像和子框架的完成加载</li>\n</ul>\n<p>load</p>\n<ul>\n<li>当所有资源加载完成之后触发</li>\n<li>包括所有相关资源: 样式表 CSS、图像 img、脚本 js</li>\n</ul>\n</blockquote>\n<h2 id=\"首次渲染和白屏\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#首次渲染和白屏\"><span>首次渲染和白屏</span></a></h2>\n<p>在 body 中第一个 script 资源下载完成之前，浏览器会进行<strong>首次渲染</strong>。</p>\n<p>将该 script 标签前面的 DOM 树和 CSSOM 合并成一棵 Render 树，渲染到页面中。</p>\n<p>这是页面从<strong>白屏</strong>到首次渲染的时间节点，即 DOMContentLoaded 触发之前经历的 HTML 文档加载和解析的时间。</p>\n<h2 id=\"遇到-script-标签\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#遇到-script-标签\"><span>遇到 <code v-pre>&lt;script&gt;</code> 标签</span></a></h2>\n<ul>\n<li>当遇到（同步）脚本（标签中不含 <code v-pre>async</code> 或 <code v-pre>defer</code>）则停止 HTML 解析，先去加载脚本，然后执行，执行结束后继续解析 HTML 文档</li>\n<li>当遇到 <code v-pre>defer</code> 脚本，则在后台加载脚本。文档解析过程不中断，而等文档解析结束之后，defer 脚本执行</li>\n<li>当遇到 <code v-pre>async</code> 脚本，则在后台加载脚本。文档解析过程不中断，脚本加载完成后，文档停止解析，脚本执行，执行结束后文档继续解析</li>\n</ul>\n<h2 id=\"script-和-domcontentloaded\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#script-和-domcontentloaded\"><span><code v-pre>&lt;script&gt;</code> 和 DOMContentLoaded</span></a></h2>\n<h3 id=\"同步脚本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#同步脚本\"><span>同步脚本</span></a></h3>\n<p>标签中不含 <code v-pre>async</code> 或 <code v-pre>defer</code></p>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code class=\"language-html\"><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  &#x3C;</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> src</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">***.js</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> charset</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">utf-8</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>&#x3C;/</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ul>\n<li>HTML 文档被解析时如果遇见（同步）脚本，则停止解析。</li>\n<li>先去加载脚本，然后执行，执行结束后继续解析 HTML 文档。</li>\n<li>HTML 文档解析完毕后触发 DOMContentLoaded。</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-sync.png\" alt=\"script-sync\"></p>\n<h3 id=\"defer-脚本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#defer-脚本\"><span><code v-pre>defer</code> 脚本</span></a></h3>\n<p>当 HTML 文档被解析时如果遇见 <code v-pre>defer</code> 脚本</p>\n<ul>\n<li>则在后台加载脚本，文档解析过程不中断</li>\n<li>等文档解析结束之后，defer 脚本执行。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code class=\"language-html\"><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  &#x3C;</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> src</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">***.js</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> charset</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">utf-8</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> defer</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>&#x3C;/</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ol>\n<li>HTML 还没解析完成时，defer 脚本已经加载完毕</li>\n</ol>\n<ul>\n<li>defer 脚本将等待 HTML 解析完成后再执行</li>\n<li>defer 脚本执行完毕后触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-defer1.png\" alt=\"script-defer1\"></p>\n<ol start=\"2\">\n<li>HTML 解析完成时，defer 脚本还没加载完毕</li>\n</ol>\n<ul>\n<li>defer 脚本继续加载，加载完成后直接执行</li>\n<li>defer 脚本执行完毕后触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-defer2.png\" alt=\"script-defer2\"></p>\n<h3 id=\"async-脚本\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#async-脚本\"><span><code v-pre>async</code> 脚本</span></a></h3>\n<p>当 HTML 文档被解析时如果遇见 <code v-pre>async</code> 脚本</p>\n<ul>\n<li>则在后台加载脚本，文档解析过程不中断。</li>\n<li>脚本加载完成后，文档停止解析，脚本执行，执行结束后文档继续解析。</li>\n</ul>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"html\" style=\"--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212\"><pre class=\"shiki shiki-themes vitesse-light vitesse-dark vp-code\" v-pre=\"\"><code class=\"language-html\"><span class=\"line\"><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">  &#x3C;</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> src</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">***.js</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> charset</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">=</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B56959;--shiki-dark:#C98A7D\">utf-8</span><span style=\"--shiki-light:#B5695977;--shiki-dark:#C98A7D77\">\"</span><span style=\"--shiki-light:#B07D48;--shiki-dark:#BD976A\"> async</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">>&#x3C;/</span><span style=\"--shiki-light:#1E754F;--shiki-dark:#4D9375\">script</span><span style=\"--shiki-light:#999999;--shiki-dark:#666666\">></span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div><ol>\n<li>HTML 还没有被解析完的时候，async 脚本已经加载完成</li>\n</ol>\n<ul>\n<li>HTML 停止解析，去执行脚本</li>\n<li>脚本执行完毕后触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-async1.png\" alt=\"script-async1\"></p>\n<ol start=\"2\">\n<li>HTML 解析完了之后，async 脚本才加载完成</li>\n</ol>\n<ul>\n<li>执行脚本</li>\n<li>在 HTML 解析完毕、async 脚本还没加载完的时候就触发 DOMContentLoaded 事件</li>\n</ul>\n<p><img src=\"@source/notes/1.frontend/4.浏览器/imgs/js-async2.png\" alt=\"script-async2\"></p>\n","tagOpen":"<template>","tagClose":"</template>"},"script":null,"scriptSetup":null,"scripts":[],"styles":[],"customBlocks":[]},"content":"\n## DOMContentLoaded 和 load 事件\n\n> MDN 定义  \n> DOMContentLoaded\n>\n> - 当初始的 HTML 文档 被 完全加载 和 解析完成 之后，DOMContentLoaded 事件被触发。\n> - 而无需等待 CSS、图像和子框架的完成加载\n>\n> load\n>\n> - 当所有资源加载完成之后触发\n> - 包括所有相关资源: 样式表 CSS、图像 img、脚本 js\n\n## 首次渲染和白屏\n\n在 body 中第一个 script 资源下载完成之前，浏览器会进行**首次渲染**。\n\n将该 script 标签前面的 DOM 树和 CSSOM 合并成一棵 Render 树，渲染到页面中。\n\n这是页面从**白屏**到首次渲染的时间节点，即 DOMContentLoaded 触发之前经历的 HTML 文档加载和解析的时间。\n\n## 遇到 `<script>` 标签\n\n- 当遇到（同步）脚本（标签中不含 `async` 或 `defer`）则停止 HTML 解析，先去加载脚本，然后执行，执行结束后继续解析 HTML 文档\n- 当遇到 `defer` 脚本，则在后台加载脚本。文档解析过程不中断，而等文档解析结束之后，defer 脚本执行\n- 当遇到 `async` 脚本，则在后台加载脚本。文档解析过程不中断，脚本加载完成后，文档停止解析，脚本执行，执行结束后文档继续解析\n\n## `<script>` 和 DOMContentLoaded\n\n### 同步脚本\n\n标签中不含 `async` 或 `defer`\n\n```HTML\n  <script src=\"***.js\" charset=\"utf-8\"></script>\n```\n\n- HTML 文档被解析时如果遇见（同步）脚本，则停止解析。\n- 先去加载脚本，然后执行，执行结束后继续解析 HTML 文档。\n- HTML 文档解析完毕后触发 DOMContentLoaded。\n\n![script-sync](./imgs/js-sync.png)\n\n### `defer` 脚本\n\n当 HTML 文档被解析时如果遇见 `defer` 脚本\n\n- 则在后台加载脚本，文档解析过程不中断\n- 等文档解析结束之后，defer 脚本执行。\n\n```HTML\n  <script src=\"***.js\" charset=\"utf-8\" defer></script>\n```\n\n1. HTML 还没解析完成时，defer 脚本已经加载完毕\n\n- defer 脚本将等待 HTML 解析完成后再执行\n- defer 脚本执行完毕后触发 DOMContentLoaded 事件\n\n![script-defer1](./imgs/js-defer1.png)\n\n2. HTML 解析完成时，defer 脚本还没加载完毕\n\n- defer 脚本继续加载，加载完成后直接执行\n- defer 脚本执行完毕后触发 DOMContentLoaded 事件\n\n![script-defer2](./imgs/js-defer2.png)\n\n### `async` 脚本\n\n当 HTML 文档被解析时如果遇见 `async` 脚本\n\n- 则在后台加载脚本，文档解析过程不中断。\n- 脚本加载完成后，文档停止解析，脚本执行，执行结束后文档继续解析。\n\n```HTML\n  <script src=\"***.js\" charset=\"utf-8\" async></script>\n```\n\n1. HTML 还没有被解析完的时候，async 脚本已经加载完成\n\n- HTML 停止解析，去执行脚本\n- 脚本执行完毕后触发 DOMContentLoaded 事件\n\n![script-async1](./imgs/js-async1.png)\n\n2. HTML 解析完了之后，async 脚本才加载完成\n\n- 执行脚本\n- 在 HTML 解析完毕、async 脚本还没加载完的时候就触发 DOMContentLoaded 事件\n\n![script-async2](./imgs/js-async2.png)","excerpt":"","includedFiles":[],"tasklistId":0,"title":"","headers":[{"level":2,"title":"DOMContentLoaded 和 load 事件","slug":"domcontentloaded-和-load-事件","link":"#domcontentloaded-和-load-事件","children":[]},{"level":2,"title":"首次渲染和白屏","slug":"首次渲染和白屏","link":"#首次渲染和白屏","children":[]},{"level":2,"title":"遇到 <script> 标签","slug":"遇到-script-标签","link":"#遇到-script-标签","children":[]},{"level":2,"title":"<script> 和 DOMContentLoaded","slug":"script-和-domcontentloaded","link":"#script-和-domcontentloaded","children":[{"level":3,"title":"同步脚本","slug":"同步脚本","link":"#同步脚本","children":[]},{"level":3,"title":"defer 脚本","slug":"defer-脚本","link":"#defer-脚本","children":[]},{"level":3,"title":"async 脚本","slug":"async-脚本","link":"#async-脚本","children":[]}]}]}}

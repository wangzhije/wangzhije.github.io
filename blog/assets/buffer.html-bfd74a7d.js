import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as e}from"./app-a98e131c.js";const t={},c=e(`<h1 id="buffer" tabindex="-1"><a class="header-anchor" href="#buffer" aria-hidden="true">#</a> Buffer</h1><blockquote><p>源代码：<code>lib/buffer.js</code>，是 JavaScript <code>Unit8Array</code> 的子类</p></blockquote><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</p><p>但在处理像 <code>TCP 流</code> 或 <code>文件流</code> 时，必须使用到 <code>二进制数据</code>。因此在 Node.js 中，定义了一个 Buffer 类，该类用来创建一个专门<code>存放二进制数据的缓存区</code>。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>概念</p><ul><li>Buffer 是一个<code>类似于数组</code>的<code>对象</code>，用于表示固定长度的字节序列</li><li>Buffer 本质是一段内存空间，专门用来处理二进制数据</li></ul><p>特点</p><ul><li>Buffer 大小固定且无法调整；每个元素的大小为 1 字节（byte），8bit</li><li>Buffer 性能较好，可以直接对计算机内存进行操作</li></ul><h2 id="buffer-与字符串" tabindex="-1"><a class="header-anchor" href="#buffer-与字符串" aria-hidden="true">#</a> Buffer 与字符串</h2><blockquote><p>编码: 将 字符串 转换为 Buffer</p><p>解码: 将 Buffer 转换为 字符串</p></blockquote><p>Node.js 支持的字符编码</p><ul><li>编码 <ul><li><code>utf8</code>: 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。</li><li><code>utf16le</code>: 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</li><li><code>latin1</code>: 一种把 Buffer 编码成一字节编码的字符串的方式。</li></ul></li><li>编码 <ul><li><code>base64</code></li><li><code>base64url</code></li><li><code>hex</code>: 将每个字节编码为两个十六进制字符。</li></ul></li><li>编码: 旧版字符 <ul><li><code>ascii</code>: 仅支持 7 位 ASCII 数据。将字符串编码为 Buffer 时,等效于使用 <code>latin1</code></li><li><code>ucs2</code>: utf16le 的别名。</li><li><code>binary</code>: latin1 的别名</li></ul></li></ul><h2 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// cjs</span>
<span class="token keyword">const</span> Buffer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;node:buffer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Buffer<span class="token punctuation">;</span>
<span class="token comment">// esm</span>
<span class="token comment">// package.json 中 设置 &quot;type&quot;: &quot;module&quot;; 以.js结尾或没有任何扩展名的文件,将作为ES模块进行加载</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Buffer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;node:buffer&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建" tabindex="-1"><a class="header-anchor" href="#创建" aria-hidden="true">#</a> 创建</h2><p><code>Buffer.alloc(size[, fill[, encoding]])</code></p><ul><li>size:</li><li>fill: 填充，默认使用</li><li>encoding: 字符编码，默认使用 <code>utf8</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个长度为 10、且用 0 填充的 Buffer。</span>
<span class="token keyword">const</span> buf1 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span>
<span class="token comment">// 创建一个长度为 10、且用 0x1 填充的 Buffer。</span>
<span class="token keyword">const</span> buf2 <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &lt;Buffer 01 01 01 01 01 01 01 01 01 01&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="写入" tabindex="-1"><a class="header-anchor" href="#写入" aria-hidden="true">#</a> 写入</h2><h2 id="读取" tabindex="-1"><a class="header-anchor" href="#读取" aria-hidden="true">#</a> 读取</h2><h2 id="源码-伪代码-便于理解-记忆" tabindex="-1"><a class="header-anchor" href="#源码-伪代码-便于理解-记忆" aria-hidden="true">#</a> 源码-伪代码，便于理解/记忆</h2><p>全局对象 Buffer</p><p>引入 Buffer(推荐使用)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 属性/方法</span>
<span class="token keyword">class</span> <span class="token class-name">Buffer</span> extend Unit8Array <span class="token punctuation">{</span>
  <span class="token comment">// extends class</span>
  Blog<span class="token punctuation">,</span>
  resolveObjectURL<span class="token punctuation">,</span>
  <span class="token comment">// other</span>
  SlowBuffer<span class="token punctuation">,</span>
  transcode<span class="token punctuation">,</span>
  <span class="token comment">// Buffer</span>
  <span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token literal-property property">poolSize</span><span class="token operator">:</span> <span class="token number">8192</span><span class="token punctuation">,</span>

    <span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">allocUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">allocUnsafeSlow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">isBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// extends</span>
    byteLength<span class="token punctuation">,</span>
    isEncoding<span class="token punctuation">,</span>
    <span class="token function">Symbol</span><span class="token punctuation">(</span>kIsEncodingSymbol<span class="token punctuation">)</span><span class="token punctuation">,</span>
    concat<span class="token punctuation">,</span>
    compare<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),o=[c];function p(i,l){return s(),a("div",null,o)}const r=n(t,[["render",p],["__file","buffer.html.vue"]]);export{r as default};

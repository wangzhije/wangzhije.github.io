(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{379:function(v,_,e){"use strict";e.r(_);var l=e(13),t=Object(l.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"vue-相关知识点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue-相关知识点"}},[v._v("#")]),v._v(" Vue 相关知识点")]),v._v(" "),_("p",[v._v("知识点整理，之后会根据源码进行详细学习和记录。")]),v._v(" "),_("h2",{attrs:{id:"vue2-api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue2-api"}},[v._v("#")]),v._v(" Vue2 API")]),v._v(" "),_("h3",{attrs:{id:"dom-相关-api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dom-相关-api"}},[v._v("#")]),v._v(" DOM 相关 API")]),v._v(" "),_("ul",[_("li",[v._v("el\n"),_("ul",[_("li",[v._v("vue 挂载的 DOM 元素")])])]),v._v(" "),_("li",[v._v("template\n"),_("ul",[_("li",[v._v("模板字符串，替换挂在元素")])])]),v._v(" "),_("li",[v._v("render\n"),_("ul",[_("li",[v._v("(createElement: () => VNode) => VNode")]),v._v(" "),_("li",[v._v("接收一个 createElment 函数，创建 VNode")]),v._v(" "),_("li",[v._v("函数组件（函数，返回一个模板）")]),v._v(" "),_("li",[v._v("类组件（通过继承）\n"),_("ul",[_("li",[v._v("单文件组件")])])])])]),v._v(" "),_("li",[v._v("renderError")])]),v._v(" "),_("h3",{attrs:{id:"资源-相关-api-directive-filter-computed"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#资源-相关-api-directive-filter-computed"}},[v._v("#")]),v._v(" 资源 相关 API: directive, filter, computed")]),v._v(" "),_("ul",[_("li",[v._v("directive 指令\n"),_("ul",[_("li",[v._v("v-bind 绑定数据, 语法糖 "),_("code",[v._v(":")]),v._v(" "),_("ul",[_("li",[v._v("v-model 等同于 v-bind:value")])])]),v._v(" "),_("li",[v._v("v-on 绑定事件, 语法糖 "),_("code",[v._v("@")])]),v._v(" "),_("li",[v._v("修饰符，以此执行")]),v._v(" "),_("li",[v._v("v-if 和 v-show\n"),_("ul",[_("li",[v._v("v-if：根据值来渲染/删除 dom\n"),_("ul",[_("li",[v._v("render 时根据 v-if 值判断是否渲染")]),v._v(" "),_("li",[v._v("v-if 值改变，双向绑定原理\n"),_("ul",[_("li",[v._v("调用 update")]),v._v(" "),_("li",[v._v("调用 patch --\x3e creatEle\n"),_("ul",[_("li",[v._v("使用原生 DOM API，渲染真实 DOM")])])])])])])]),v._v(" "),_("li",[v._v("v-show：会渲染 dom，根据值改变 display 切换显示隐藏")])])]),v._v(" "),_("li",[v._v("v-for\n"),_("ul",[_("li",[v._v("v-for 比 v-if 优先级高")])])]),v._v(" "),_("li",[v._v("v-key 管理可复用元素\n"),_("ul",[_("li",[v._v("有 key，重新渲染，")]),v._v(" "),_("li",[v._v("无 key，不重新渲染（如，input 不会替换，保存上次输入的内容）")])])]),v._v(" "),_("li",[v._v("自定义指令\n"),_("ul",[_("li",[v._v("钩子函数/生命周期\n"),_("ul",[_("li",[v._v("bind")]),v._v(" "),_("li",[v._v("inserted：被绑定元素插入父节点时调用")]),v._v(" "),_("li",[v._v("update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前")]),v._v(" "),_("li",[v._v("componentUpdate：指令所在组件的 VNode 及其子 VNode 全部更新后调用")]),v._v(" "),_("li",[v._v("unbind")])])]),v._v(" "),_("li",[v._v("钩子函数参数\n"),_("ul",[_("li",[v._v("固定参数")]),v._v(" "),_("li",[v._v("动态指令参数")])])]),v._v(" "),_("li",[v._v("函数简写，bind 和 update")]),v._v(" "),_("li",[v._v("对象字面量：指令需要多个参数，对象")])])])])])]),v._v(" "),_("h3",{attrs:{id:"数据-相关-api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据-相关-api"}},[v._v("#")]),v._v(" 数据 相关 API")]),v._v(" "),_("ul",[_("li",[v._v("data：Vue 实例的数据对象\n"),_("ul",[_("li",[v._v("对应 template 的 Mustache 文本插值，指令等")])])]),v._v(" "),_("li",[v._v("methods\n"),_("ul",[_("li",[v._v("事件处理器")])])]),v._v(" "),_("li",[v._v("computed\n"),_("ul",[_("li",[v._v("计算属性，派生数据\n"),_("ul",[_("li",[v._v("对 data 中的值的运算和逻辑处理，解耦")])])]),v._v(" "),_("li",[v._v("也是数据对象，所以不能和 data 声明同一个值")]),v._v(" "),_("li",[v._v("计算数据，会被缓存，除非触发双向绑定")]),v._v(" "),_("li",[v._v("对比\n"),_("ul",[_("li",[v._v("method\n"),_("ul",[_("li",[v._v("每次事件触发都必须执行，所以不是响应式的")]),v._v(" "),_("li",[v._v("computed 的响应式可以避免无谓的渲染")])])]),v._v(" "),_("li",[v._v("watch\n"),_("ul",[_("li",[v._v("computed，支持缓存，不可以执行异步操作\n"),_("ul",[_("li",[v._v("以为 computed 最后执行 return")]),v._v(" "),_("li",[v._v("异步操作的结果可能在 return 之后执行完成")])])]),v._v(" "),_("li",[v._v("watch，可以执行异步操作，不支持缓存\n"),_("ul",[_("li",[v._v("数据变化则触发 watch，可通过")])])])])])])])])]),v._v(" "),_("li",[v._v("watch\n"),_("ul",[_("li",[v._v("数据监听")]),v._v(" "),_("li",[v._v("当需要在数据变化时，执行异步或开销较大的操作时")])])]),v._v(" "),_("li",[v._v("props\n"),_("ul",[_("li",[v._v("父组件向子组件传递的参数，单向\n"),_("ul",[_("li",[v._v("反向：定义另一个变量，传递给父组件，父组件赋值")])])])])])]),v._v(" "),_("h3",{attrs:{id:"组合-相关-api"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组合-相关-api"}},[v._v("#")]),v._v(" 组合 相关 API")]),v._v(" "),_("ul",[_("li",[v._v("parent")]),v._v(" "),_("li",[v._v("mixin，混入对象，选项合并\n"),_("ul",[_("li",[v._v("自定义选项合并 "),_("code",[v._v("Vue.config.optionMergeStrategies")])])])]),v._v(" "),_("li",[v._v("extends")]),v._v(" "),_("li",[v._v("provide/inject")])]),v._v(" "),_("h3",{attrs:{id:"组件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[v._v("#")]),v._v(" 组件")]),v._v(" "),_("ul",[_("li",[v._v("单文件组件\n"),_("ul",[_("li",[v._v("通过 webpack 的 vue-loader 解析")]),v._v(" "),_("li",[v._v("文件结构\n"),_("ul",[_("li",[v._v("html/template")]),v._v(" "),_("li",[v._v("CSS/style\n"),_("ul",[_("li",[v._v("style scoped\n"),_("ul",[_("li",[v._v("为当前组件的所有 DOM 元素定义一个自定义属性，data-v-")]),v._v(" "),_("li",[v._v("通过属性选择器，作用于匹配的 DOM 元素")]),v._v(" "),_("li",[v._v("父组件，深度选择器\n"),_("ul",[_("li",[_("strong",[v._v(">>>")]),v._v(" 只适用于 CSS")]),v._v(" "),_("li",[v._v("Less/Scss 中使用 /deep/ 和 最新的 ::v-deep")])])])])])])]),v._v(" "),_("li",[v._v("JS/JSX")])])])])])]),v._v(" "),_("h3",{attrs:{id:"生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#生命周期"}},[v._v("#")]),v._v(" 生命周期")]),v._v(" "),_("h3",{attrs:{id:"响应式原理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#响应式原理"}},[v._v("#")]),v._v(" 响应式原理")]),v._v(" "),_("h3",{attrs:{id:"插件机制"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#插件机制"}},[v._v("#")]),v._v(" 插件机制")]),v._v(" "),_("ul",[_("li",[v._v("开发\n"),_("ul",[_("li",[v._v("暴露 install 方法 "),_("code",[v._v("MyPlugin.install = function (Vue, options)")])])])]),v._v(" "),_("li",[v._v("使用\n"),_("ul",[_("li",[_("code",[v._v("Vue.use(MyPlugin)")]),v._v(" 调用 "),_("code",[v._v("MyPlugin.install")]),v._v(" 方")])])])]),v._v(" "),_("h2",{attrs:{id:"vue-router"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vue-router"}},[v._v("#")]),v._v(" Vue-router")]),v._v(" "),_("h3",{attrs:{id:"路由模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由模式"}},[v._v("#")]),v._v(" 路由模式")]),v._v(" "),_("ul",[_("li",[v._v("hash 模式 "),_("code",[v._v("/#/")]),v._v(" "),_("ul",[_("li",[v._v("这部分 URL 从未被发送到服务器")]),v._v(" "),_("li",[v._v("不利于 SEO")])])]),v._v(" "),_("li",[v._v("history 模式\n"),_("ul",[_("li",[v._v("正常路径")]),v._v(" "),_("li",[v._v("需要配置对应的 "),_("code",[v._v(".html")]),v._v(" 页面，否则会 404")])])])]),v._v(" "),_("h3",{attrs:{id:"路由跳转"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由跳转"}},[v._v("#")]),v._v(" 路由跳转")]),v._v(" "),_("ul",[_("li",[v._v("声明式导航 "),_("code",[v._v('<router-link :to="...">')]),v._v(" 相当于 "),_("code",[v._v("<a href>")])]),v._v(" "),_("li",[v._v("编程式导航 "),_("code",[v._v("router.push(...)")]),v._v(" 方法\n"),_("ul",[_("li",[v._v("push（跳转新页面，产生历史记录）")]),v._v(" "),_("li",[v._v("replace（替换当前页面，不产生历史记录）")]),v._v(" "),_("li",[v._v("go（在根据历史记录跳转）")])])]),v._v(" "),_("li",[v._v("重定向和别名\n"),_("ul",[_("li",[v._v("重定向：访问新的路由地址")]),v._v(" "),_("li",[v._v("别名：访问 alias 路由地址，页面加载 path 映射的组件")])])])]),v._v(" "),_("h3",{attrs:{id:"路由传参"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由传参"}},[v._v("#")]),v._v(" 路由传参")]),v._v(" "),_("ul",[_("li",[v._v("路径参数 "),_("code",[v._v("{ path: '/users/:id', component: User }")]),v._v(" "),_("ul",[_("li",[v._v("路径表现 "),_("code",[v._v("/users/111")]),v._v(" "),_("code",[v._v("/users/222")])]),v._v(" "),_("li",[v._v("获取参数， 映射到 "),_("code",[v._v("this.$route.params.id")])])])]),v._v(" "),_("li",[v._v("可选参数(查询字符串) "),_("code",[v._v("{ path: '/users?id=111', component: User }")]),v._v(" "),_("ul",[_("li",[v._v("路径表现 "),_("code",[v._v("/users?id=111")]),v._v(" "),_("code",[v._v("/users?id=222")])]),v._v(" "),_("li",[v._v("获取参数， 映射到 "),_("code",[v._v("this.$route.query.id")])])])]),v._v(" "),_("li",[v._v("属性参数\n"),_("ul",[_("li",[v._v("props")])])])]),v._v(" "),_("h3",{attrs:{id:"动态绑定路由信息"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态绑定路由信息"}},[v._v("#")]),v._v(" 动态绑定路由信息")]),v._v(" "),_("h3",{attrs:{id:"路由导航-拦截器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由导航-拦截器"}},[v._v("#")]),v._v(" 路由导航（拦截器）")]),v._v(" "),_("ul",[_("li",[v._v("全局级\n"),_("ul",[_("li",[v._v("全局前置守卫 "),_("code",[v._v("router.beforeEach((to, from) => { next()})")]),v._v(" "),_("ul",[_("li",[v._v("每次都按顺序调用，等待异步执行")])])]),v._v(" "),_("li",[v._v("全局解析守卫 "),_("code",[v._v("router.resolveEach((to, from) => { next()})")])]),v._v(" "),_("li",[v._v("全局后置守卫 "),_("code",[v._v("router.afterEach((to, from) => { next()})")])])])]),v._v(" "),_("li",[v._v("单个路由\n"),_("ul",[_("li",[_("code",[v._v("beforeEnter: (to, from) => {})")])])])]),v._v(" "),_("li",[v._v("组件级\n"),_("ul",[_("li",[_("code",[v._v("beforeRouteEnter: (to, from) => {})")]),v._v(" "),_("ul",[_("li",[v._v("在渲染该组件的对应路由被验证前调用")])])]),v._v(" "),_("li",[_("code",[v._v("beforeRouteUpdate: (to, from) => {})")]),v._v(" "),_("ul",[_("li",[v._v("在当前路由改变，但是该组件被复用时调用")])])]),v._v(" "),_("li",[_("code",[v._v("beforeRouteLeave: (to, from) => {})")]),v._v(" "),_("ul",[_("li",[v._v("在导航离开渲染该组件的对应路由时调用")])])])])])]),v._v(" "),_("h3",{attrs:{id:"路由元信息-meta-路由层面的数据存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由元信息-meta-路由层面的数据存储"}},[v._v("#")]),v._v(" 路由元信息 meta（路由层面的数据存储）")]),v._v(" "),_("ul",[_("li",[v._v("配置路由信息\n"),_("ul",[_("li",[v._v("如校验\n"),_("ul",[_("li",[v._v("注册路由 "),_("code",[v._v("meta: { requiresAuth: true }")])]),v._v(" "),_("li",[_("code",[v._v("router.beforeEach")]),v._v(" 路由导航守卫，获取 meta，并处理 "),_("code",[v._v("if (to.meta.requiresAuth){}")])])])])])])]),v._v(" "),_("h3",{attrs:{id:"路由过渡动效"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由过渡动效"}},[v._v("#")]),v._v(" 路由过渡动效")]),v._v(" "),_("ul",[_("li",[v._v("全局动效\n"),_("ul",[_("li",[_("code",[v._v('<router-view v-slot="{ Component }"><transition name="fade"><component :is="Component" /></transition></router-view>')])])])]),v._v(" "),_("li",[v._v("单个路由\n"),_("ul",[_("li",[v._v("配置 meta "),_("code",[v._v("{ component: PanelLeft, meta: { transition: 'slide-left' }}")])])])])]),v._v(" "),_("h3",{attrs:{id:"路由懒加载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载"}},[v._v("#")]),v._v(" 路由懒加载")]),v._v(" "),_("ul",[_("li",[v._v("异步路由")]),v._v(" "),_("li",[v._v("动态加载路由 "),_("code",[v._v("import('./views/UserDetails')")]),v._v(" "),_("ul",[_("li",[v._v("不要动态加载异步路由，异步路由本身就是动态导入的")])])])]),v._v(" "),_("h2",{attrs:{id:"vuex"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#vuex"}},[v._v("#")]),v._v(" Vuex")]),v._v(" "),_("ul",[_("li",[v._v("Store\n"),_("ul",[_("li",[v._v("modules，将 store 分割成模块\n"),_("ul",[_("li",[v._v("state")]),v._v(" "),_("li",[v._v("getter\n"),_("ul",[_("li",[v._v("类似于 computed 属性")]),v._v(" "),_("li",[v._v("state 的派生状态，state 的中间处理")])])]),v._v(" "),_("li",[v._v("mutation\n"),_("ul",[_("li",[v._v("更新 state 的途径，必须是同步方法")])])]),v._v(" "),_("li",[v._v("action\n"),_("ul",[_("li",[v._v("提交的是 mutation，而不是直接变更状态")]),v._v(" "),_("li",[v._v("可以包含任意异步操作")])])])])])])]),v._v(" "),_("li",[v._v("Flux 架构")])])])}),[],!1,null,null,null);_.default=t.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{351:function(a,t,r){"use strict";r.r(t);var s=r(13),e=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"了解设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#了解设计模式"}},[a._v("#")]),a._v(" 了解设计模式")]),a._v(" "),t("p",[a._v("你有没有这样的感觉 ..."),t("br"),a._v("\n看一些经典的源码，总会觉得，别人的代码简明而且灵活，自己的代码缺臃肿而且难懂...")]),a._v(" "),t("p",[a._v("学习设计模式，可以一定程度解决这个问题，使我们的代码更加简明，更加便于维护，这也是代码质量的一个重要指标。")]),a._v(" "),t("h2",{attrs:{id:"什么是设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是设计模式"}},[a._v("#")]),a._v(" 什么是设计模式")]),a._v(" "),t("blockquote",[t("p",[a._v("设计模式(design pattern)，是对面向对象设计中反复出现的问题的解决方案。")])]),a._v(" "),t("h2",{attrs:{id:"历史来源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#历史来源"}},[a._v("#")]),a._v(" 历史来源")]),a._v(" "),t("p",[a._v("设计模式这个术语是上个世纪 90 年代由 Erich Gamma、Richard Helm、Raplh Johnson 和 Jonhn Vlissides 四个人总结提炼出来的，并且写了一本 Design Patterns 的书。这四人也被称为四人帮（GoF）。")]),a._v(" "),t("h2",{attrs:{id:"为什么使用设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用设计模式"}},[a._v("#")]),a._v(" 为什么使用设计模式")]),a._v(" "),t("p",[a._v("为什么要使用设计模式？根本原因还是软件开发要实现可维护、可扩展，就必须尽量复用代码，并且降低代码的耦合度。")]),a._v(" "),t("h2",{attrs:{id:"设计模式的原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的原则"}},[a._v("#")]),a._v(" 设计模式的原则")]),a._v(" "),t("p",[a._v("设计模式主要是基于 OOP 编程提炼的，它基于以下几个原则：")]),a._v(" "),t("h3",{attrs:{id:"开闭原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#开闭原则"}},[a._v("#")]),a._v(" 开闭原则")]),a._v(" "),t("p",[a._v("由 Bertrand Meyer 提出的开闭原则（Open Closed Principle）是指，软件应该对扩展开放，而对修改关闭。这里的意思是在增加新功能的时候，能不改代码就尽量不要改，如果只增加代码就完成了新功能，那是最好的。")]),a._v(" "),t("h3",{attrs:{id:"里氏替换原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#里氏替换原则"}},[a._v("#")]),a._v(" 里氏替换原则")]),a._v(" "),t("p",[a._v("里氏替换原则是 Barbara Liskov 提出的，这是一种面向对象的设计原则，即如果我们调用一个父类的方法可以成功，那么替换成子类调用也应该完全可以运行。")]),a._v(" "),t("h3",{attrs:{id:"巨人的肩膀"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#巨人的肩膀"}},[a._v("#")]),a._v(" 巨人的肩膀")]),a._v(" "),t("p",[a._v("设计模式把一些常用的设计思想提炼出一个个模式，然后给每个模式命名，这样在使用的时候更方便交流。"),t("br"),a._v("\nGoF 把 23 个常用模式分为创建型模式、结构型模式和行为型模式三类，我们后续会一一讲解。")])])}),[],!1,null,null,null);t.default=e.exports}}]);
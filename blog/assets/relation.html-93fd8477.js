import{_ as l,V as i,W as e,a1 as a}from"./framework-ad6b4471.js";const t={},r=a('<h1 id="关系型数据库设计规则" tabindex="-1"><a class="header-anchor" href="#关系型数据库设计规则" aria-hidden="true">#</a> 关系型数据库设计规则</h1><blockquote><p>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。<br> 表具有一些特性，这些特性定义了数据在表中如何存储，类似 Java 和 Python 中 “类”的设计</p></blockquote><h3 id="表、记录、字段" tabindex="-1"><a class="header-anchor" href="#表、记录、字段" aria-hidden="true">#</a> 表、记录、字段</h3><ul><li>表 table</li><li>记录 record</li><li>字段 file</li></ul><h3 id="e-r-entity-relationship-实体-联系-模型中有三个主要概念是" tabindex="-1"><a class="header-anchor" href="#e-r-entity-relationship-实体-联系-模型中有三个主要概念是" aria-hidden="true">#</a> E-R（entity-relationship，实体-联系）模型中有三个主要概念是：</h3><p>实体集 class &lt;---&gt; 数据库中的一个表 table</p><ul><li>一个实体 instance &lt;---&gt; 数据库中表 table 的一行 row/一条记录 record</li></ul><p>属性 attribute &lt;---&gt; 数据库中表 table 的一列 column/一个字段 file</p><p>联系集</p><ul><li>表的关联关系 <ul><li>一对一 <ul><li>学生表（拆分两个表） <ul><li>个人信息表（常用）</li><li>档案信息表（不常用）</li></ul></li><li>两个建表原则 <ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系</li></ul></li></ul></li><li>一对多 <ul><li>部门表&amp;员工表\\客户表&amp;订单表、分类表&amp;商品表、 <ul><li>主表：部门表</li><li>从表：员工表</li></ul></li><li>建表原则 <ul><li>在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键</li></ul></li></ul></li><li>多对多 <ul><li>学生信息表-选课信息表（中间表/联系表）-课程信息表</li><li>产品表-订单明细表（中间表/联系表）-订单表</li><li>用户-用户角色（中间表/联系表）-角色</li><li>建表原则 <ul><li>需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键</li></ul></li></ul></li><li>自我引用</li></ul></li></ul><h2 id="orm-思想-object-relational-mapping-体现" tabindex="-1"><a class="header-anchor" href="#orm-思想-object-relational-mapping-体现" aria-hidden="true">#</a> ORM 思想 (Object Relational Mapping)体现</h2><ul><li>数据库中的一个表 &lt;---&gt; Java 或 Python 中的一个类</li><li>表中的一条数据 &lt;---&gt; 类中的一个对象（或实体）</li><li>表中的一个列 &lt;----&gt; 类中的一个字段、属性(field)</li></ul>',12),n=[r];function o(u,c){return i(),e("div",null,n)}const d=l(t,[["render",o],["__file","relation.html.vue"]]);export{d as default};

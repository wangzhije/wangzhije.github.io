import{_ as t,c as r,e as a,o}from"./app-DoYSvn9w.js";const i={};function p(n,e){return o(),r("div",null,e[0]||(e[0]=[a('<blockquote><p>AI 技术虽然日新月异，但主要就是 Prompt（提示）、RAG、Agent。</p></blockquote><h2 id="prompt" tabindex="-1"><a class="header-anchor" href="#prompt"><span>Prompt</span></a></h2><blockquote><p>Prompt 指的是提供给模型的文本和指令，</p><p>可以用来引导模型生成自然语言输出（Completion），</p><p>可以给模型提供上下文信息，对模型的输出结果至关重要。</p></blockquote><p>AI 应用开发</p><p>先是从 ChatGPT 开始</p><p>然后是</p><p>基于 AI 的翻译类的应用</p><ul><li><a href="https://github.com/openai-translator/openai-translator" target="_blank" rel="noopener noreferrer">openai-translator</a></li><li><a href="https://immersivetranslate.com/" target="_blank" rel="noopener noreferrer">immersivetranslate</a>，</li></ul><p>写作类的应用</p><ul><li><a href="https://www.notion.so/product/ai" target="_blank" rel="noopener noreferrer">Notion AI</a>，</li></ul><p>编程辅助类的应用</p><ul><li><a href="https://github.com/features/copilot" target="_blank" rel="noopener noreferrer">GitHub Copilot</a></li><li><a href="https://docs.github.com/en/copilot/github-copilot-chat/using-github-copilot-chat?tool=vscode" target="_blank" rel="noopener noreferrer">GitHub Copilot Chat</a>，</li></ul><p>主要基于 GPT 的 Prompt（提示）实现。</p><h3 id="gpt-模型" tabindex="-1"><a class="header-anchor" href="#gpt-模型"><span>GPT 模型</span></a></h3><p>GPT（Generative Pre-trained Transformer）是一个推理模型，它主要基于预训练和微调两个阶段。</p><p>预训练</p><ul><li>使用一个大规模的语料库进行基础训练，例如使用维基百科、新闻文章、小说等来进行训练</li><li>当训练完成后，输入一句话给它，它会基于这句话给出一个概率上的预测，预测后续应该拼接上什么单词，这个拼接的单词是基于它在预训练阶段学习到的知识来进行概率选定的，通过一次次循环的单词预测，最终可以拼接出一段话来。这也是它被称为生成式 AI 的原因</li><li>也就是 Prompt，是生成式 AI 概率生成的基础</li></ul><p>微调</p><ul><li>将 GPT 模型加载到特定的任务上，并使用该任务的数据集对模型进行训练</li><li>模型就可以根据任务的要求进行微调，以便更好地理解 Prompt 并生成与任务相关的文本</li><li>通过微调，GPT 可以适应不同的任务，如文本分类、情感分析、问答系统等</li><li>成本昂贵，最终效果并不稳定</li></ul><h3 id="prompt-学习资料" tabindex="-1"><a class="header-anchor" href="#prompt-学习资料"><span>Prompt 学习资料</span></a></h3><ul><li>吴恩达 <a href="https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/" target="_blank" rel="noopener noreferrer">ChatGPT Prompt 工程</a>，快速了解 Prompt 的使用方式</li><li><a href="https://www.promptingguide.ai/" target="_blank" rel="noopener noreferrer"> Prompt Engineering Guide</a>,包含了大量的 Prompt 基础知识和未来的发展方向</li><li><a href="https://platform.openai.com/docs/guides/gpt-best-practices" target="_blank" rel="noopener noreferrer">GPT 最佳实践</a>,OpenAI 官方文档实践指南，包含了大量的 Prompt 示例和使用技巧</li></ul><h2 id="rag" tabindex="-1"><a class="header-anchor" href="#rag"><span>RAG</span></a></h2><blockquote><p>RAG，Retrieval-augmented Generation，检索增强生成。</p></blockquote><p>Prompt 问题：</p><ul><li>Prompt 应用开发，是基于已有的大模型的训练数据，也就是时效性问题</li><li>如果是基于最新的数据，没有基于这些数据进行训练，也就无法解决该类问题</li><li>GPT Prompt 有大小限制，gpt-3.5-turbo 模型它的限制是 4K tokens(～ 3000 字)，这意味着使用者最多只能输入 3000 字给 GPT 来理解和推理答案</li></ul><p>RAG 应用：</p><ul><li>解决某些场景下 GPT 无法回答的问题，这是他最大的优点。</li><li>无需训练，无需微调，只需要将文本转化为向量再通过检索就能实现，以低成本的方式就能让某些业务场景变成可能。</li></ul><h3 id="rag-应用核心思想" tabindex="-1"><a class="header-anchor" href="#rag-应用核心思想"><span>RAG 应用核心思想</span></a></h3><p>通过向量检索的方式检索与问题最相关的文本段，从而绕过 GPT tokens 的限制。</p><ul><li>拆分：将参考文本拆分成多个部分</li><li>将问题转化为向量：分别进行 RAG 转化为向量存储到向量数据库中</li><li>通过向量数据库进行检索，最后再将检索到的向量转化为文本输出</li></ul><p>缺点： 文本拆分、查询范围、检索的质量，将在很大的程度上影响最终的结果</p><h2 id="gpt-agents" tabindex="-1"><a class="header-anchor" href="#gpt-agents"><span>GPT Agents</span></a></h2>',32)]))}const s=t(i,[["render",p]]),h=JSON.parse('{"path":"/ai/gpt/","title":"GPT","lang":"zh-CN","frontmatter":{"title":"GPT","createTime":"2025/08/21 12:49:01","permalink":"/ai/gpt/"},"readingTime":{"minutes":2.98,"words":894},"git":{"createdTime":1755770188000,"updatedTime":1755770188000,"contributors":[{"name":"wangzhije","username":"wangzhije","email":"1662285571@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/wangzhije?v=4","url":"https://github.com/wangzhije"}]},"filePathRelative":"notes/9.AI/1.介绍.md","headers":[],"categoryList":[{"id":"4358b5","sort":10000,"name":"notes"},{"id":"5aef85","sort":9,"name":"AI"}]}');export{s as comp,h as data};
